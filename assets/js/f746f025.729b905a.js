"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[329],{3905:function(n,e,t){t.d(e,{Zo:function(){return u},kt:function(){return m}});var i=t(7294);function o(n,e,t){return e in n?Object.defineProperty(n,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):n[e]=t,n}function r(n,e){var t=Object.keys(n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(n);e&&(i=i.filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),t.push.apply(t,i)}return t}function a(n){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?r(Object(t),!0).forEach((function(e){o(n,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(n,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(e){Object.defineProperty(n,e,Object.getOwnPropertyDescriptor(t,e))}))}return n}function c(n,e){if(null==n)return{};var t,i,o=function(n,e){if(null==n)return{};var t,i,o={},r=Object.keys(n);for(i=0;i<r.length;i++)t=r[i],e.indexOf(t)>=0||(o[t]=n[t]);return o}(n,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(n);for(i=0;i<r.length;i++)t=r[i],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(n,t)&&(o[t]=n[t])}return o}var l=i.createContext({}),s=function(n){var e=i.useContext(l),t=e;return n&&(t="function"==typeof n?n(e):a(a({},e),n)),t},u=function(n){var e=s(n.components);return i.createElement(l.Provider,{value:e},n.children)},d={inlineCode:"code",wrapper:function(n){var e=n.children;return i.createElement(i.Fragment,{},e)}},p=i.forwardRef((function(n,e){var t=n.components,o=n.mdxType,r=n.originalType,l=n.parentName,u=c(n,["components","mdxType","originalType","parentName"]),p=s(t),m=o,f=p["".concat(l,".").concat(m)]||p[m]||d[m]||r;return t?i.createElement(f,a(a({ref:e},u),{},{components:t})):i.createElement(f,a({ref:e},u))}));function m(n,e){var t=arguments,o=e&&e.mdxType;if("string"==typeof n||o){var r=t.length,a=new Array(r);a[0]=p;var c={};for(var l in e)hasOwnProperty.call(e,l)&&(c[l]=e[l]);c.originalType=n,c.mdxType="string"==typeof n?n:o,a[1]=c;for(var s=2;s<r;s++)a[s]=t[s];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}p.displayName="MDXCreateElement"},6374:function(n,e,t){t.r(e),t.d(e,{frontMatter:function(){return c},contentTitle:function(){return l},metadata:function(){return s},toc:function(){return u},default:function(){return p}});var i=t(3117),o=t(102),r=(t(7294),t(3905)),a=["components"],c={sidebar_position:1},l="Lifecycle",s={unversionedId:"usage_instructions/connection_lifecycle",id:"usage_instructions/connection_lifecycle",title:"Lifecycle",description:"Initializing",source:"@site/docs/usage_instructions/connection_lifecycle.md",sourceDirName:"usage_instructions",slug:"/usage_instructions/connection_lifecycle",permalink:"/docs/usage_instructions/connection_lifecycle",editUrl:"https://github.com/dooboolab/react-native-iap/edit/main/docs/docs/usage_instructions/connection_lifecycle.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Installing",permalink:"/docs/installing"},next:{title:"Retrieving available items",permalink:"/docs/usage_instructions/retrieve_available"}},u=[{value:"Initializing",id:"initializing",children:[],level:2},{value:"Ending Connection",id:"ending-connection",children:[],level:2},{value:"Dos and Don&#39;ts",id:"dos-and-donts",children:[{value:"\u2705 DO:",id:"-do",children:[],level:3},{value:"\u274c DON&#39;T :",id:"-dont-",children:[],level:3}],level:2}],d={toc:u};function p(n){var e=n.components,t=(0,o.Z)(n,a);return(0,r.kt)("wrapper",(0,i.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lifecycle"},"Lifecycle"),(0,r.kt)("h2",{id:"initializing"},"Initializing"),(0,r.kt)("p",null,"In order to initialize the native modules, call ",(0,r.kt)("inlineCode",{parentName:"p"},"initConnection()")," early in the lifecycle of your application. This should be done at a top-level component as the library caches the native connection. Initializing just before you needed is discouraged as it incurrs on a performance hit. Calling this method multiple times without ending the previous connection will result in an error. Not calling this method will cause other method calls to be rejected as connection needs to be established ahead of time. "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import * as RNIap from 'react-native-iap';\n\ncomponentDidMount() {\n    RNIap.initConnection();\n    ...\n")),(0,r.kt)("h2",{id:"ending-connection"},"Ending Connection"),(0,r.kt)("p",null,"In order to release the resources, call ",(0,r.kt)("inlineCode",{parentName:"p"},"endConnection()")," when you no longer need any interaction with the library."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"componentWillUnmount() {\n  ...\n  RNIap.endConnection();\n}\n")),(0,r.kt)("h2",{id:"dos-and-donts"},"Dos and Don'ts"),(0,r.kt)("p",null,"You shoud not call ",(0,r.kt)("inlineCode",{parentName:"p"},"initConnection")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"endConnection")," every time you need to interact with the library. This is considered an anti-pattern as it consumes more time, resources and could lead to undesired side effects such as many callbacks."),(0,r.kt)("h3",{id:"-do"},"\u2705 DO:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import * as RNIap from 'react-native-iap';\n\ncomponentDidMount() {\n  await RNIap.initConnection();\n\n  await RNIap.getProducts(productIds)\n  ...\n}\n\nbuyProductButtonClick() {\n  //startPurchaseCode\n}\n\nsubscribeButtonClick() {\n  //startPurchaseCode\n}\n\n\ncomponentWillUnmount() {\n  ...\n  RNIap.endConnection();\n}\n")),(0,r.kt)("h3",{id:"-dont-"},"\u274c DON'T :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},"import * as RNIap from 'react-native-iap';\n\ncomponentDidMount() {\n  ...\n}\n\nconst buyProductButtonClick = async() => {\n  await RNIap.initConnection();\n\n  await RNIap.getProducts(productIds)\n  // Purchase IAP Code\n  ...\n    await RNIap.endConnection();\n}\n\nconst subscribeButtonClick = async() => {\n  await RNIap.initConnection();\n\n    await RNIap.getProducts(productIds)\n    //Purchase Subscription Code\n    ...\n    await RNIap.endConnection();\n}\n\ncomponentWillUnmount() {\n  ...\n}\n")))}p.isMDXComponent=!0}}]);